/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ClientEditInput: { // input type
    animeList: number[]; // [Int!]!
    id: number; // Int!
    mangaList: number[]; // [Int!]!
  }
  ClientSaveInput: { // input type
    animeList: number[]; // [Int!]!
    mangaList: number[]; // [Int!]!
    uid: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Anime: { // root type
    coverImage: string; // String!
    description: string; // String!
    genres: string[]; // [String!]!
    id: number; // Int!
    idMal: number; // Int!
    meanScore: number; // Int!
    source: string; // String!
    synonyms: string[]; // [String!]!
    title: string; // String!
    type: string; // String!
  }
  List: { // root type
    animeList: number[]; // [Int!]!
    id: number; // Int!
    mangaList: number[]; // [Int!]!
    uid: string; // String!
  }
  Manga: { // root type
    coverImage: string; // String!
    description: string; // String!
    genres: string[]; // [String!]!
    id: number; // Int!
    idMal: number; // Int!
    meanScore: number; // Int!
    source: string; // String!
    synonyms: string[]; // [String!]!
    title: string; // String!
    type: string; // String!
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Anime: { // field return type
    coverImage: string; // String!
    description: string; // String!
    genres: string[]; // [String!]!
    id: number; // Int!
    idMal: number; // Int!
    meanScore: number; // Int!
    source: string; // String!
    synonyms: string[]; // [String!]!
    title: string; // String!
    type: string; // String!
  }
  List: { // field return type
    animeList: number[]; // [Int!]!
    id: number; // Int!
    mangaList: number[]; // [Int!]!
    uid: string; // String!
  }
  Manga: { // field return type
    coverImage: string; // String!
    description: string; // String!
    genres: string[]; // [String!]!
    id: number; // Int!
    idMal: number; // Int!
    meanScore: number; // Int!
    source: string; // String!
    synonyms: string[]; // [String!]!
    title: string; // String!
    type: string; // String!
  }
  Mutation: { // field return type
    deleteList: NexusGenRootTypes['List'] | null; // List
    editList: NexusGenRootTypes['List'] | null; // List
    saveList: NexusGenRootTypes['List'] | null; // List
  }
  Query: { // field return type
    allAnime: NexusGenRootTypes['Anime'][]; // [Anime!]!
    allLists: NexusGenRootTypes['List'][]; // [List!]!
    allManga: NexusGenRootTypes['Manga'][]; // [Manga!]!
    findSomeAnime: NexusGenRootTypes['Anime'][]; // [Anime!]!
    findSomeManga: NexusGenRootTypes['Manga'][]; // [Manga!]!
  }
}

export interface NexusGenFieldTypeNames {
  Anime: { // field return type name
    coverImage: 'String'
    description: 'String'
    genres: 'String'
    id: 'Int'
    idMal: 'Int'
    meanScore: 'Int'
    source: 'String'
    synonyms: 'String'
    title: 'String'
    type: 'String'
  }
  List: { // field return type name
    animeList: 'Int'
    id: 'Int'
    mangaList: 'Int'
    uid: 'String'
  }
  Manga: { // field return type name
    coverImage: 'String'
    description: 'String'
    genres: 'String'
    id: 'Int'
    idMal: 'Int'
    meanScore: 'Int'
    source: 'String'
    synonyms: 'String'
    title: 'String'
    type: 'String'
  }
  Mutation: { // field return type name
    deleteList: 'List'
    editList: 'List'
    saveList: 'List'
  }
  Query: { // field return type name
    allAnime: 'Anime'
    allLists: 'List'
    allManga: 'Manga'
    findSomeAnime: 'Anime'
    findSomeManga: 'Manga'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteList: { // args
      id: number; // Int!
    }
    editList: { // args
      data: NexusGenInputs['ClientEditInput']; // ClientEditInput!
    }
    saveList: { // args
      data: NexusGenInputs['ClientSaveInput']; // ClientSaveInput!
    }
  }
  Query: {
    findSomeAnime: { // args
      idMalArray: Array<number | null>; // [Int]!
    }
    findSomeManga: { // args
      idMalArray: Array<number | null>; // [Int]!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}