{"version":3,"sources":["Anime/GenreList/GenreList.js","lib/firebase.js","config.js","Authentication/Authentication.js","Anime/GeneralInfo/GeneralInfo.js","Anime/OtherInfo/OtherInfo.js","Anime/Anime.js","Login/Login.js","Login/SignUp/SignUp.js","Anime/Navigation.js","Anime/Search/Search.js","Anime/FavoriteList/Lists/AnimeList.js","Anime/FavoriteList/Lists/MangaList.js","Anime/FavoriteList/FavoriteList.js","Anime/Search/SearchManga.js","Anime/Footer.js","Anime/Manga.js","App.js","serviceWorker.js","index.js"],"names":["GenreList","genres","Card","id","Typography","variant","List","map","genre","index","ListItem","name","app","apps","length","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initialAuthState","isAuthenticated","isInitialized","user","favoriteList","userList","clickedAnime","login","logout","signup","click","searchList","addFavorite","getList","loadData","sendData","removeFavorite","reducer","state","action","type","payload","Authentication","createContext","method","signInWithGoogle","Promise","resolve","signInWithEmailAndPassword","createUserWithEmailAndPassword","loadAppData","sendAppData","AuthProvider","children","useReducer","dispatch","useState","favorite","setFavorite","clicked","setClicked","list","setList","mangaList","setMangaList","deleteList","setDeleteList","uid","animeList","setUserList","backEnd","axios","create","baseURL","a","get","params","data","setupAnimeList","setupMangaList","animeArray","value","mangaArray","email","password","auth","favoriteListBuilder","anime","mal_id","determinePutPostDelete","dummyState","_id","delete","putList","postList","push","post","put","useEffect","admin","onAuthStateChanged","avatar","photoURL","displayName","tier","Provider","signOut","newList","provider","GoogleAuthProvider","signInWithPopup","favoriteHandler","_favorite","deleteHandler","bool","currentUser","GeneralInfo","searchResult","styles","authContext","useContext","added","setAdded","history","useHistory","style","src","image_url","alt","title","width","height","Link","onClick","malID","Button","className","score","synopsis","OtherInfo","props","title_synonyms","related","Adaptation","href","url","transitionStyles","entering","opacity","entered","exiting","exited","Anime","setAnime","compLoad","setCompLoad","newCall","getAnime","Transition","in","timeout","mountOnEnter","unmountOnExit","to","Login","handleGoogleClick","console","log","initialValues","Email","Password","Submit","validationSchema","Yup","shape","min","max","required","Favorite","onSubmit","values","setErrors","setStatus","setSubmitting","favoriteHanlder","error","success","submit","message","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","noValidate","autoComplete","TextField","autoFocus","label","onChange","onBlur","Boolean","helpertext","Favorte","disabled","Username","fullWidth","size","SignUp","favorteHandler","NavContent","Avatar","Navigation","CSSTransition","classNames","isAuth","Search","Array","searchResults","setSearchResults","getResults","isArray","setResults","result","offset","AnimeList","AuthContext","fullList","setFullList","listChange","setListChange","setListRender","item","MangaList","AnimeSwitch","withStyles","switchBase","color","green","backgroundColor","checked","track","Switch","FavoriteList","isAnime","setIsAnime","determineIfDelete","inputProps","SearchManga","Footer","App","path","exact","component","Signup","Manga","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5f74358f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, List, ListItem, Typography } from \"@material-ui/core\";\n\n// Just maps out the genres array.\nconst GenreList = ({ genres }) => {\n  return (\n    <Card id=\"genre\">\n      <Typography variant=\"h4\">Genres</Typography>\n      <List id=\"genreList\">\n        {genres.map((genre, index) => {\n          return <ListItem>{genre.name}</ListItem>;\n        })}\n      </List>\n    </Card>\n  );\n};\nexport default GenreList;\n","import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport { firebaseConfig } from \"../config\";\n\nif (!app.apps.length) {\n  app.initializeApp(firebaseConfig);\n}\n\nexport default app;\n","export const firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n","import React, { useState, createContext, useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport app from \"../lib/firebase\";\nimport \"firebase/firestore\";\n\n// This is just the initial state of the authentication.\nconst initialAuthState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null,\n  favoriteList: [],\n  userList: {},\n  clickedAnime: \"\",\n  login: () => {},\n  logout: () => {},\n  signup: () => {},\n  click: () => {},\n  searchList: () => {},\n  addFavorite: () => {},\n  getList: () => {},\n  loadData: () => {},\n  sendData: () => {},\n  removeFavorite: () => {},\n};\n\n// This reducer returns the state an objecgt based on if the user successfully authenticated.\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"AUTH_STATE_CHANGED\": {\n      const { isAuthenticated, user } = action.payload;\n      return {\n        ...state,\n        isAuthenticated,\n        isInitialized: true,\n        user,\n      };\n    }\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n\n// This is the context of the entire application.\n// It is what allows all views to be able to load what it needs to load.\n// Like Anime.js, gets the clickedAnime prop to load the anime the user requested.\n// It also handles the search and favorites. As well as the authentication process.\nexport const Authentication = createContext({\n  ...initialAuthState,\n  method: \"appAuth\",\n  signInWithGoogle: () => Promise.resolve(),\n  signInWithEmailAndPassword: () => Promise.resolve(),\n  createUserWithEmailAndPassword: () => Promise.resolve(),\n  loadAppData: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  sendAppData: () => Promise.resolve(),\n  clickedAnime: \"\",\n  favoriteList: [],\n});\n\n// This is the Provider and lets the rest of the compoments access things globally without needing to pass a prop everywhere.\nconst AuthProvider = ({ children }) => {\n  // Here are my hooks that trigger states and keep track of things accross the app.\n  const [state, dispatch] = useReducer(reducer, initialAuthState);\n  const [favorite, setFavorite] = useState();\n  const [clicked, setClicked] = useState();\n  const [list, setList] = useState([]); // animeList\n  const [mangaList, setMangaList] = useState([]);\n  const [deleteList, setDeleteList] = useState(false);\n  const [userList, setUserList] = useState({\n    uid: null,\n    animeList: [],\n    mangaList: [],\n  });\n\n  // This is the back end stuff.\n  const backEnd = axios.create({\n    baseURL: \"http://localhost:6060/api\",\n  });\n\n  const deleteHandler = (bool) => {\n    setDeleteList(bool);\n  };\n\n  const getList = async (uid) => {\n    const { data } = await backEnd.get(`/List/${uid}`, {\n      params: {\n        uid: uid,\n      },\n    });\n    setupAnimeList(data);\n    setupMangaList(data);\n    setUserList(data);\n  };\n\n  const setupAnimeList = async (user) => {\n    let animeArray = [];\n    for (let value of user.animeList) {\n      let { data } = await backEnd.get(`/Anime/${value}`);\n      animeArray = [...animeArray, data];\n    }\n    setList([...animeArray]);\n  };\n\n  const setupMangaList = async (data) => {\n    let mangaArray = [];\n    for (let value of data.mangaList) {\n      let { data } = await backEnd.get(`/Manga/${value}`);\n      mangaArray = [...mangaArray, data];\n    }\n    setMangaList([...mangaArray]);\n  };\n\n  // This handles the now depricated\n  const favoriteHandler = (_favorite) => {\n    setFavorite(_favorite);\n  };\n  // This group handles the sign up and login functinality. Email/Password, Google Account, and hanldes crateing an account with an email and password.\n  const signInWithEmailAndPassword = async (email, password) => {\n    return app.auth().signInWithEmailAndPassword(email, password);\n  };\n  const createUserWithEmailAndPassword = async (email, password) => {\n    return app.auth().createUserWithEmailAndPassword(email, password);\n  };\n  const signInWithGoogle = () => {\n    const provider = new app.auth.GoogleAuthProvider();\n    return app.auth().signInWithPopup(provider);\n  };\n  // Just the logout function\n  const logoutHandler = () => {\n    determinePutPostDelete();\n    return app.auth().signOut();\n  };\n  // This build the favorite list.\n  const favoriteListBuilder = async (anime) => {\n    if (list || mangaList)\n      if (anime.type === \"TV\" || anime.type === \"Movie\") {\n        const { data } = await backEnd.get(`/Anime/${anime.mal_id}`);\n        setList([...list, data]);\n      } else {\n        const { data } = await backEnd.get(`/Manga/${anime.mal_id}`);\n        setMangaList([...mangaList, data]);\n      }\n  };\n\n  const determinePutPostDelete = async () => {\n    let animeArray = [];\n    let mangaArray = [];\n    let dummyState = userList;\n    const { data } = await backEnd.get(`/List/${state.user.id}`);\n    if (!deleteList) {\n      if (data.animeList.length !== 0) {\n        putList(animeArray, mangaArray, dummyState);\n      } else {\n        postList(animeArray, mangaArray, dummyState);\n      }\n    } else {\n      if (userList._id) {\n        backEnd.delete(`/DeleteList/${userList._id}`);\n      }\n    }\n  };\n\n  const postList = (animeArray, mangaArray, dummyState) => {\n    for (let value of list) {\n      animeArray.push(value.mal_id);\n    }\n    for (let value of mangaList) {\n      mangaArray.push(value.mal_id);\n    }\n    dummyState.animeList = [...animeArray];\n    dummyState.mangaList = [...mangaArray];\n    backEnd.post(\"/CreateList\", {\n      uid: dummyState.uid,\n      animeList: dummyState.animeList,\n      mangaList: dummyState.mangaList,\n    });\n  };\n\n  const putList = (animeArray, mangaArray, dummyState) => {\n    for (let value of list) {\n      animeArray.push(value.mal_id);\n    }\n    for (let value of mangaList) {\n      mangaArray.push(value.mal_id);\n    }\n    dummyState.animeList = [...animeArray];\n    dummyState.mangaList = [...mangaArray];\n    backEnd.put(\"/EditList\", {\n      _id: dummyState._id,\n      uid: dummyState.uid,\n      animeList: dummyState.animeList,\n      mangaList: dummyState.mangaList,\n    });\n  };\n\n  // Searches the list and returns a bool that determines if the add button is a remove button and vice versa.\n  const favoriteListSearcher = (mal_id, type) => {\n    if (type === \"TV\" || type === \"Movie\")\n      for (let value of list) {\n        if (value.mal_id === mal_id) {\n          return true;\n        }\n      }\n    else {\n      for (let value of mangaList) {\n        if (value.mal_id === mal_id) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  // This removes an anime from the list by looking for the anime of the same ID\n  const favoriteListHandler = (mal_id, type) => {\n    let newList = [];\n    if (type === \"TV\" || type === \"Movie\") {\n      for (let value of userList.animeList) {\n        if (value.mal_id !== mal_id) {\n          newList = [...newList, value];\n        }\n      }\n      setList([...newList]);\n    } else {\n      for (let value of userList.mangaList) {\n        if (value.mal_id !== mal_id) {\n          newList = [...newList, value];\n        }\n      }\n      setMangaList([...newList]);\n    }\n  };\n  // This makes sure that the clicked anime is remembered after going towards the anime page.\n  const setClickedHandler = (click) => {\n    setClicked(click);\n  };\n\n  // This is juse the logic used to make sure the user is authenticated between sessions and if they logout correctly sets the state so that isAuthenticated returns false.\n  useEffect(\n    (admin) => {\n      const unsubscribe = app.auth().onAuthStateChanged((user) => {\n        if (user) {\n          dispatch({\n            type: \"AUTH_STATE_CHANGED\",\n            payload: {\n              isAuthenticated: true,\n              user: {\n                id: user.uid,\n                avatar: user.photoURL,\n                email: user.email,\n                name: user.displayName || user.email,\n                tier: \"Premium\",\n              },\n            },\n          });\n        } else {\n          dispatch({\n            type: \"AUTH_STATE_CHANGED\",\n            payload: {\n              isAuthenticated: false,\n              user: null,\n            },\n          });\n        }\n      });\n      return unsubscribe;\n    },\n    [dispatch]\n  );\n  // This useEffect makes sure to load and save the favorite list every time a rerender is made (basically whenever the button in GeneralInfo needs to change its text)\n\n  return (\n    <Authentication.Provider\n      value={{\n        ...state,\n        method: \"firebaseAuth\",\n        logout: logoutHandler,\n        signInWithEmailAndPassword,\n        click: setClickedHandler,\n        addFavorite: favoriteListBuilder,\n        removeFavorite: favoriteListHandler,\n        searchList: favoriteListSearcher,\n        signInWithGoogle,\n        createUserWithEmailAndPassword,\n        favoriteHandler: favoriteHandler,\n        getList: getList,\n        deleteHandler: deleteHandler,\n        deleteList: deleteList,\n        favorite: favorite,\n        clicked: clicked,\n        userList: userList,\n        favoriteList: list,\n        mangaList: mangaList,\n        user: app.auth().currentUser,\n      }}\n    >\n      {children}\n    </Authentication.Provider>\n  );\n};\nexport default AuthProvider;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Button, Card, Typography, Link } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { Authentication } from \"../../Authentication/Authentication\";\n\nconst GeneralInfo = ({ anime, searchResult, styles }) => {\n  // Hooks for controlling the state\n  const authContext = useContext(Authentication);\n  const [added, setAdded] = useState();\n  const history = useHistory();\n\n  // Bunching up removing and adding favorites here to save lines of code\n  const addRemoveFavorite = () => {\n    if (added) {\n      authContext.removeFavorite(anime.mal_id, anime.type);\n    } else {\n      authContext.addFavorite(anime);\n    }\n  };\n\n  // this is another redirect to ensure the page is brought up with the correct data.\n  const redirectToCorrectPage = (malID, type) => {\n    authContext.click(malID);\n    if (type === \"TV\" || type === \"Movie\") {\n      history.push(\"/Anime\");\n    } else {\n      history.push(\"/Manga\");\n    }\n  };\n\n  // This is her to conditinally render the text of the button\n  useEffect(() => {\n    if (authContext.searchList(anime.mal_id, anime.type)) {\n      setAdded(true);\n    } else {\n      setAdded(false);\n    }\n  }, [authContext, anime]);\n\n  return (\n    <Card id=\"synopsis\" style={styles}>\n      <img\n        src={anime.image_url}\n        alt={`${anime.title} Promotional Art`}\n        style={{\n          width: \"225px !important\",\n          height: \"346px\",\n        }}\n      />\n      <div id=\"scoreSyn\">\n        <div id=\"titleContain\">\n          {searchResult ? (\n            <Link onClick={() => redirectToCorrectPage(anime.mal_id, anime.type)}>\n              <Typography id=\"animeTitle\" variant=\"h4\">\n                {anime.title}\n              </Typography>\n            </Link>\n          ) : (\n            <Typography id=\"animeTitle\" variant=\"h4\">\n              {anime.title}\n            </Typography>\n          )}\n        </div>\n\n        <Button variant=\"contained\" onClick={() => addRemoveFavorite()}>\n          {\n            added\n              ? \"Remove\"\n              : \"Add\" /*This is what determines which text to use.*/\n          }\n        </Button>\n\n        <Typography className=\"score\">\n          <span className=\"bold\">Score:</span> {anime.score}/10\n        </Typography>\n\n        <div id=\"synText\">\n          <Typography>Synopsis:</Typography>\n          <Typography>{anime.synopsis}</Typography>\n        </div>\n      </div>\n    </Card>\n  );\n};\nexport default GeneralInfo;\n","import React from \"react\";\nimport \"../../anime.css\";\nimport { Card, Typography, List, ListItem, Link } from \"@material-ui/core\";\n\n// This literally just renders the other titles info and the adaptation info if ther eis info to display.\nconst OtherInfo = (props) => {\n  const space = \" \";\n  return (\n    <Card>\n      {props.title_synonyms.length !== 0 ? (\n        <div id=\"other-titles\">\n          <Typography variant=\"h4\">Other Titles:</Typography>\n          <List className=\"liststyle\">\n            {props.title_synonyms.map((value) => {\n              return <ListItem>{value}</ListItem>;\n            })}\n          </List>\n        </div>\n      ) : null}\n      {!props.related?.Adaptation?.length ? null : (\n        <div id=\"source\" styles=\"\">\n          <Typography variant=\"p\">\n            Based on:\n            {\n              space /*this wouldn't let me put a space here manually so I had to do some trickery*/\n            }\n            <Link className=\"link\" href={props.related.Adaptation[0].url}>\n              {props.related.Adaptation[0].name}\n            </Link>\n          </Typography>\n        </div>\n      )}\n    </Card>\n  );\n};\nexport default OtherInfo;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { Card } from \"@material-ui/core\";\nimport { Redirect } from \"react-router-dom\";\nimport Transition from \"react-transition-group/Transition\";\n\nimport GenreList from \"./GenreList/GenreList\";\nimport GeneralInfo from \"./GeneralInfo/GeneralInfo\";\nimport OtherInfo from \"./OtherInfo/OtherInfo\";\nimport { Authentication } from \"../Authentication/Authentication\";\n\n// Transistion States\nconst transitionStyles = {\n  entering: {\n    opacity: 0.5,\n  },\n  entered: {\n    opacity: 1,\n  },\n  exiting: {\n    opacity: 0.5,\n  },\n  exited: {\n    opacity: 0,\n  },\n};\n\nconst Anime = () => {\n  // Hooks needed in order for the view to function.\n  const [anime, setAnime] = useState();\n  const [compLoad, setCompLoad] = useState(false);\n  const authContext = useContext(Authentication);\n\n  // Logic for setting up the view for the view\n  useEffect(() => {\n    if (!compLoad && anime) {\n      setCompLoad(true);\n    }\n    const backEnd = axios.create({\n      baseURL: \"http://localhost:6060/api\",\n    });\n    async function getAnime(newCall) {\n      const { data } = await backEnd.get(`/Anime/Detail/${newCall}`);\n      setAnime(data);\n    }\n    getAnime(authContext.clicked);\n  }, [setAnime, authContext.clicked, compLoad, anime]);\n\n  // Route Gaurding\n  if (!authContext.isAuthenticated) {\n    return <Redirect to=\"/\" />;\n  }\n\n  // Ensuring the view is populated while the anime is being called on.\n  if (!anime) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Transition in={compLoad} timeout={1000} mountOnEnter unmountOnExit>\n      {(state) => (\n        <Card\n          id=\"container\"\n          style={\n            ({\n              transition: \"opacity 1s ease-out\",\n            },\n            transitionStyles[state])\n          }\n        >\n          <GeneralInfo anime={anime} searchResult={false} styles={null} />\n          {/* These components are mainly static and don't have any special function\n          They only take the props given and map them out. In some cases only if they have something to map out.\n    */}\n          <GenreList genres={anime?.genres} />\n          <OtherInfo\n            title_synonyms={anime?.title_synonyms}\n            genres={anime?.genres}\n            related={anime?.related}\n          />\n        </Card>\n      )}\n    </Transition>\n  );\n};\n\nexport default Anime;\n","import React, { useContext } from \"react\";\nimport { Card, TextField, Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { Authentication } from \"../Authentication/Authentication\";\n\nconst Login = () => {\n  // All of the hooks needed to make the component work\n  const authContext = useContext(Authentication);\n  const history = useHistory();\n  // This separates the sign in functions form the context.\n  const { signInWithGoogle, signInWithEmailAndPassword } = authContext;\n\n  // This hanldes the google login by wrapping it in an asynchronous function.\n  const handleGoogleClick = async () => {\n    try {\n      await signInWithGoogle();\n      history.push(\"/Search\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  if (authContext.isAuthenticated) {\n    history.push(\"/Search\");\n  }\n\n  return (\n    <Card id=\"login\">\n      <h4>Login</h4>\n      {/* Using Formik, we set the expected values, then steup the logic and validation. After that its a pretty simple form */}\n      <Formik\n        initialValues={{\n          Email: \"\",\n          Password: \"\",\n          Submit: null,\n        }}\n        validationSchema={Yup.object().shape({\n          Email: Yup.string()\n            .min(10, \"Too short\")\n            .max(50, \"Too long\")\n            .required(\"Must enter an email\"),\n          Password: Yup.string()\n            .min(8, \"Too short\")\n            .max(50, \"Too long\")\n            .required(\"Must enter a password\"),\n          Favorite: Yup.string().min(4, \"Too Short\").max(100, \"Too Long\"),\n        })}\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n          try {\n            await signInWithEmailAndPassword(values.Email, values.Password);\n            authContext.favoriteHanlder(values.Favorite);\n            history.push(\"/Search\");\n            console.log(values.Email, values.Password);\n          } catch (err) {\n            console.error(err);\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <Card className=\"Login Card\">\n            <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n              <TextField\n                autoFocus\n                id=\"outlined-basic\"\n                name=\"Email\"\n                className=\"textfield\"\n                label=\"email\"\n                variant=\"outlined\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.Email}\n                required\n                error={Boolean(touched.Email && errors.Email)}\n                helpertext={touched.Email && errors.Email}\n              />\n              <TextField\n                id=\"outlined-basic\"\n                name=\"Password\"\n                className=\"textfield\"\n                label=\"Password\"\n                variant=\"outlined\"\n                value={values.Password}\n                onBlur={handleBlur}\n                error={Boolean(touched.Password && errors.Password)}\n                helpertext={touched.Password && errors.Password}\n                onChange={handleChange}\n                required\n              />\n              <TextField\n                id=\"outlined-basic\"\n                name=\"Favorite\"\n                className=\"textfield\"\n                label=\"Favorite Anime\"\n                variant=\"outlined\"\n                value={values.Favorite}\n                onBlur={handleBlur}\n                error={Boolean(touched.Favorite && errors.Favorite)}\n                helpertext={touched.Favorte && errors.Password}\n                onChange={handleChange}\n              />\n              <Button\n                className=\"button\"\n                variant=\"contained\"\n                disabled={errors.Username || errors.Password}\n                type=\"Submit\"\n              >\n                Sign Up\n              </Button>\n            </form>\n          </Card>\n        )}\n      </Formik>\n      {/* This is the button that logs in with google. */}\n      <Button\n        fullWidth\n        onClick={handleGoogleClick}\n        size=\"large\"\n        variant=\"contained\"\n      >\n        Sign in With Google\n      </Button>\n    </Card>\n  );\n};\nexport default Login;\n","import React, { useContext } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useHistory } from \"react-router-dom\";\nimport { Card, TextField, Button } from \"@material-ui/core\";\n\nimport { Authentication } from \"../../Authentication/Authentication\";\n\nconst SignUp = () => {\n  // All of the hooks needed to make the component work\n  const authContext = useContext(Authentication);\n  const history = useHistory();\n  // This separates the sign in functions form the context.\n  const { createUserWithEmailAndPassword, signInWithGoogle } = authContext;\n\n  // This hanldes the google login by wrapping it in an asynchronous function.\n  const handleGoogleClick = async () => {\n    try {\n      await signInWithGoogle();\n      history.push(\"/Search\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  if (authContext.isAuthenticated) {\n    history.push(\"/Search\");\n  }\n\n  return (\n    <Card id=\"login\">\n      <h4>Sign Up</h4>\n      <Card>\n        {/* Using Formik, we set the expected values, then steup the logic and validation. After that its a pretty simple form */}\n        <Formik\n          initialValues={{\n            Email: \"\",\n            Password: \"\",\n            Submit: null,\n          }}\n          validationSchema={Yup.object().shape({\n            Email: Yup.string()\n              .min(10, \"Too short\")\n              .max(50, \"Too long\")\n              .required(\"Must enter an email\"),\n            Password: Yup.string()\n              .min(8, \"Too short\")\n              .max(50, \"Too long\")\n              .required(\"Must enter a password\"),\n            Favorite: Yup.string().min(4, \"Too Short\").max(100, \"Too Long\"),\n          })}\n          onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n            try {\n              await createUserWithEmailAndPassword(\n                values.Email,\n                values.Password\n              );\n              authContext.favorteHandler(values.Favorite);\n              history.push(\"/Search\");\n              console.log(values.Email, values.Email);\n            } catch (err) {\n              console.error(err);\n            }\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n          }) => (\n            <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n              <TextField\n                autoFocus\n                id=\"outlined-basic\"\n                name=\"Email\"\n                className=\"textfield\"\n                label=\"Email\"\n                variant=\"outlined\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.Email}\n                required\n                error={Boolean(touched.Email && errors.Email)}\n                helpertext={touched.Email && errors.Email}\n              />\n              <TextField\n                id=\"outlined-basic\"\n                name=\"Password\"\n                className=\"textfield\"\n                label=\"Password\"\n                variant=\"outlined\"\n                value={values.Password}\n                onBlur={handleBlur}\n                error={Boolean(touched.Password && errors.Password)}\n                helpertext={touched.Password && errors.Password}\n                onChange={handleChange}\n                required\n              />\n              <TextField\n                id=\"outlined-basic\"\n                name=\"Favorite\"\n                className=\"textfield\"\n                label=\"Favorite Anime\"\n                variant=\"outlined\"\n                value={values.Favorite}\n                onBlur={handleBlur}\n                error={Boolean(touched.Favorite && errors.Favorite)}\n                helpertext={touched.Favorte && errors.Password}\n                onChange={handleChange}\n              />\n              <Button\n                className=\"button\"\n                variant=\"contained\"\n                disabled={errors.Username || errors.Password}\n                type=\"Submit\"\n              >\n                Sign Up\n              </Button>\n            </form>\n          )}\n        </Formik>\n      </Card>\n      {/* This is the button that logs in with google. */}\n      <Button\n        fullWidth\n        onClick={handleGoogleClick}\n        size=\"large\"\n        variant=\"contained\"\n      >\n        Sign in With Google\n      </Button>\n    </Card>\n  );\n};\nexport default SignUp;\n","import React, { useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Button, Avatar } from \"@material-ui/core\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport { Authentication } from \"../Authentication/Authentication\";\n\nconst NavContent = () => {\n  // This is how it gets the authentication info.\n  const authContext = useContext(Authentication);\n\n  useEffect(() => {}, [authContext.logout]);\n\n  if (!authContext.isAuthenticated)\n    return (\n      <Card id=\"loggedOut\">\n        <ul className=\"nav\">\n          <li>\n            <Link to=\"/\">\n              <Button>Sign In</Button>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/SignUp\">\n              <Button>Sign Up</Button>\n            </Link>\n          </li>\n        </ul>\n      </Card>\n    );\n  if (authContext.isAuthenticated)\n    return (\n      <Card id=\"loggedIn\">\n        <Avatar className=\"avatar\" src={authContext.user.photoURL} />\n        <ul className=\"nav\">\n          <li>\n            <Link to=\"/\">\n              <Button onClick={authContext.logout}>Log Out</Button>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/Search\">\n              <Button>See Anime</Button>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/SearchManga\">\n              <Button>\n                See Manga\n              </Button>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/Favorites\">\n              <Button>Favorites</Button>\n            </Link>\n          </li>\n        </ul>\n      </Card>\n    );\n};\n\n// This is pretty short and sweet. It makes sure that it renders based on whether or not the user is logged in.\nconst Navigation = () => {\n  // This is how it gets the authentication info.\n  const authContext = useContext(Authentication);\n\n  return (\n    <CSSTransition\n      in={authContext.isAuthenticated}\n      timeout={1000}\n      classNames=\"slide\"\n    >\n      <NavContent isAuth={authContext.isAuthenticated} />\n    </CSSTransition>\n  );\n};\nexport default Navigation;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport Transition from \"react-transition-group/Transition\";\nimport LazyLoad from \"react-lazyload\";\n\nimport { Authentication } from \"../../Authentication/Authentication\";\nimport GeneralInfo from \"../GeneralInfo/GeneralInfo\";\n\n// Transistion States\nconst transitionStyles = {\n  entering: {\n    opacity: 0.5,\n  },\n  entered: {\n    opacity: 1,\n  },\n  exiting: {\n    opacity: 0.5,\n  },\n  exited: {\n    opacity: 0,\n  },\n};\n\n// Main Component\nconst Search = () => {\n  // Hooks for the component\n  const authContext = useContext(Authentication);\n  const [searchResults, setSearchResults] = useState(Array);\n  const [compLoad, setCompLoad] = useState(false);\n\n  // JikanAPI reference.\n  // const jikanApi = axios.create({\n  //   baseURL: \"https://api.jikan.moe/v3/\",\n  // });\n\n  // This is sthe search function. This is how the view gets its results.\n  // async function getResults(newCall) {\n  //   // This is configured to ensure the correct anime at least pop up correctly with the mature content filter on.\n  //   // Otherwise titles like Black Clover and My Hero Academia won't ever show up.\n  //   const { data } = await jikanApi.get(\n  //     `search/anime?q=${newCall}&limit=15&genre=12&genre_exclude=0&order_by=members&sort=desc`\n  //   );\n  //   setSearchResults(data.results);\n  // }\n\n  // The logic needed to re render upon a new search and use the favorite attribute of the context that I might remove (inb4 I forget to remove this comment)\n  useEffect(() => {\n    const backEnd = axios.create({\n      baseURL: \"http://localhost:6060/api\",\n    });\n    async function getResults() {\n      const { data } = await backEnd.get(`/Anime`);\n\n      console.log(Array.isArray(data));\n      return data;\n    }\n    async function setResults() {\n      setSearchResults( await getResults());\n    }\n    setResults();\n    if (authContext.userList.uid === null && authContext.user !== null) {\n      authContext.getList(authContext.user.uid);\n    }\n  }, [authContext]);\n\n  useEffect(() => {\n    if (!compLoad && searchResults) {\n      setCompLoad(true);\n    }\n  }, [compLoad, searchResults]);\n\n  // Route Gauarding\n  if (!authContext.isAuthenticated) {\n    return <Redirect to=\"/\" />;\n  }\n\n  // conditional rendering to keep the view populated between searches.\n  if (!searchResults) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <Transition in={compLoad} timeout={1000} mountOnEnter unmountOnExit>\n        {(state) => (\n          <Card\n            id=\"search\"\n            style={\n              ({\n                transition: \"opacity 1s ease-out\",\n              },\n              transitionStyles[state])\n            }\n          >\n            {searchResults?.map((result) => {\n              return (\n                <>\n                  <LazyLoad offset={100}>\n                    <GeneralInfo anime={result} searchResult={true} />\n                  </LazyLoad>\n                </>\n              );\n            })}\n          </Card>\n        )}\n      </Transition>\n    );\n  }\n};\nexport default Search;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { Card, Typography, Button, Link } from \"@material-ui/core\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport { Transition } from \"react-transition-group\";\n\nimport { Authentication } from \"../../../Authentication/Authentication\";\n\n// Transistion Stylings\nconst transitionStyles = {\n  entering: {\n    opacity: 0.5,\n  },\n  entered: {\n    opacity: 1,\n  },\n  exiting: {\n    opacity: 0.5,\n  },\n  exited: {\n    opacity: 0,\n  },\n};\n\n// The Component proper\n// Because of the way I constructed this component, using the GeneralInfo Component causes an infinite loop\n// So, this will stay the way it is because I didn't want to debug that.\nconst AnimeList = () => {\n  // Hooks needed for the page to function.\n  const AuthContext = useContext(Authentication);\n  const [fullList, setFullList] = useState();\n  const [listChange, setListChange] = useState(true);\n  const [compLoad, setCompLoad] = useState(false);\n  const history = useHistory();\n\n  // This is mainly to track if the list has changed or not.\n  const listChangeTracker = (mal_id) => {\n    AuthContext.removeFavorite(mal_id);\n    setListChange(true);\n  };\n\n  // this is another redirect to ensure the page is brought up with the correct data.\n  const redirectToAnimePage = (malID) => {\n    AuthContext.click(malID);\n    history.push(\"/Anime\");\n  };\n\n  // The logic to see if the view should rerender.\n  useEffect(() => {\n    if (!compLoad && fullList) {\n      setCompLoad(true);\n    }\n    const setListRender = async () => {\n      if (listChange) {\n        await setFullList(AuthContext.favoriteList);\n        setListChange(false);\n      }\n    };\n    setListRender();\n  }, [listChange, AuthContext.favoriteList, compLoad, fullList]);\n\n  // Tells the user if they don't have any favorites saved. Thought it doesn't seem to work.\n  if (!fullList) {\n    return (\n      <Card>\n        <Typography>\n          You don't have any favorites saved. Click the Add button to add. If\n          you want to remove it, hit the remove button.\n        </Typography>\n      </Card>\n    );\n  }\n\n  return (\n    <Transition in={compLoad} timeout={1000} mountOnEnter unmountOnExit>\n      {(state) => (\n        <Card className=\"favoriteList\">\n          <Typography className=\"pageTitle\" variant=\"h4\">\n            Favorite List\n          </Typography>\n          {fullList.map((item) => {\n            // Maps the array to the DOM.\n            // Having a hard time getting the transition to function similarly to Search.js\n            return (\n              <Card\n                className=\"favorite\"\n                style={\n                  ({\n                    transition: \"opacity 1s ease-in\",\n                  },\n                  transitionStyles[state])\n                }\n              >\n                <img\n                  src={item.image_url}\n                  alt={`${item.title} Promotional Art`}\n                  style={{\n                    width: \"225px !important\",\n                    height: \"346px\",\n                  }}\n                  className=\"resultImage\"\n                />\n                <div classNames=\"titleScore\">\n                  <Link onClick={() => redirectToAnimePage(item.mal_id)}>\n                    <Typography variant=\"h4\">{item.title}</Typography>\n                  </Link>\n                  <div className=\"favScore\">\n                    <Typography variant=\"h5\">{item.score}</Typography>\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => listChangeTracker(item.mal_id)}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"favSyn\">\n                  <Typography variant=\"p\" className=\"\">\n                    {item.synopsis}\n                  </Typography>\n                </div>\n              </Card>\n            );\n          })}\n        </Card>\n      )}\n    </Transition>\n  );\n};\nexport default AnimeList;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { Card, Typography, Button, Link } from \"@material-ui/core\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport { Transition } from \"react-transition-group\";\n\nimport { Authentication } from \"../../../Authentication/Authentication\";\n\n// Transistion Stylings\nconst transitionStyles = {\n  entering: {\n    opacity: 0.5,\n  },\n  entered: {\n    opacity: 1,\n  },\n  exiting: {\n    opacity: 0.5,\n  },\n  exited: {\n    opacity: 0,\n  },\n};\n\n// The Component proper\n// Because of the way I constructed this component, using the GeneralInfo Component causes an infinite loop\n// So, this will stay the way it is because I didn't want to debug that.\nconst MangaList = () => {\n  // Hooks needed for the page to function.\n  const AuthContext = useContext(Authentication);\n  const [fullList, setFullList] = useState();\n  const [listChange, setListChange] = useState(true);\n  const [compLoad, setCompLoad] = useState(false);\n  const history = useHistory();\n\n  // This is mainly to track if the list has changed or not.\n  const listChangeTracker = (mal_id) => {\n    AuthContext.removeFavorite(mal_id);\n    setListChange(true);\n  };\n\n  // this is another redirect to ensure the page is brought up with the correct data.\n  const redirectToAnimePage = (malID) => {\n    AuthContext.click(malID);\n    history.push(\"/Manga\");\n  };\n\n  // The logic to see if the view should rerender.\n  useEffect(() => {\n    if (!compLoad && fullList) {\n      setCompLoad(true);\n    }\n    const setListRender = async () => {\n      if (listChange) {\n        await setFullList(AuthContext.mangaList);\n        setListChange(false);\n      }\n    };\n    setListRender();\n  }, [listChange, AuthContext.mangaList, compLoad, fullList]);\n\n  // Tells the user if they don't have any favorites saved. Thought it doesn't seem to work.\n  if (!fullList) {\n    return (\n      <Card>\n        <Typography>\n          You don't have any favorites saved. Click the Add button to add. If\n          you want to remove it, hit the remove button.\n        </Typography>\n      </Card>\n    );\n  }\n\n  return (\n    <Transition in={compLoad} timeout={1000} mountOnEnter unmountOnExit>\n      {(state) => (\n        <Card className=\"favoriteList\">\n          <Typography className=\"pageTitle\" variant=\"h4\">\n            Favorite List\n          </Typography>\n          {fullList.map((item) => {\n            // Maps the array to the DOM.\n            // Having a hard time getting the transition to function similarly to Search.js\n            return (\n              <Card\n                className=\"favorite\"\n                style={\n                  ({\n                    transition: \"opacity 1s ease-in\",\n                  },\n                  transitionStyles[state])\n                }\n              >\n                <img\n                  src={item.image_url}\n                  alt={`${item.title} Promotional Art`}\n                  style={{\n                    width: \"225px !important\",\n                    height: \"346px\",\n                  }}\n                  className=\"resultImage\"\n                />\n                <div classNames=\"titleScore\">\n                  <Link onClick={() => redirectToAnimePage(item.mal_id)}>\n                    <Typography variant=\"h4\">{item.title}</Typography>\n                  </Link>\n                  <div className=\"favScore\">\n                    <Typography variant=\"h5\">{item.score}</Typography>\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => listChangeTracker(item.mal_id)}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"favSyn\">\n                  <Typography variant=\"p\" className=\"\">\n                    {item.synopsis}\n                  </Typography>\n                </div>\n              </Card>\n            );\n          })}\n        </Card>\n      )}\n    </Transition>\n  );\n};\nexport default MangaList;\n","import React, { useState, useContext} from \"react\";\nimport { Card, Typography, Switch, Button } from \"@material-ui/core\";\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport { Redirect } from \"react-router-dom\";\n\nimport { Authentication } from \"../../Authentication/Authentication\";\nimport AnimeList from \"./Lists/AnimeList\";\nimport MangaList from \"./Lists/MangaList\";\n\n\nconst AnimeSwitch = withStyles({\n  switchBase: {\n    color: green[300],\n    '&$checked': {\n      color: green[500],\n    },\n    '&$checked + $track': {\n      backgroundColor: green[500],\n    },\n  },\n  checked: {},\n  track: {},\n})(Switch);\n\n// The Component proper\n// Because of the way I constructed this component, using the GeneralInfo Component causes an infinite loop\n// So, this will stay the way it is because I didn't want to debug that.\nconst FavoriteList = () => {\n  // Hooks needed for the page to function.\n  const [isAnime, setIsAnime] = useState(true);\n  const authContext = useContext(Authentication);\n\n  const determineIfDelete = (bool) => {\n    authContext.deleteHandler(bool);\n  }\n\n  const handleChange = () => {\n    if (isAnime) {\n      setIsAnime(false);\n    } else {\n      setIsAnime(true);\n    }\n  };\n\n  if (!authContext.isAuthenticated) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <Card id=\"true-contain\">\n      <div className=\"switch-contain\">\n        <Typography variant=\"p\" className=\"switch-text\">Switch Lists</Typography>\n        <AnimeSwitch\n          className=\"switch\"\n          checked={isAnime}\n          onChange={handleChange}\n          name=\"listSwitch\"\n          inputProps={{ \"aria-label\": \"primary-checkbox\" }}\n        />\n        {!authContext.deleteList ? <Button className=\"delete-button\" onClick={() => determineIfDelete(true)}>Delete List on Logout</Button> : <Button className=\"delete-button\" onClick={() => determineIfDelete(false)}>Don't Delete List on Logout</Button>}\n      </div>\n      {isAnime ? <AnimeList /> : <MangaList />}\n    </Card>\n  );\n};\nexport default FavoriteList;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport Transition from \"react-transition-group/Transition\";\nimport LazyLoad from \"react-lazyload\";\n\nimport { Authentication } from \"../../Authentication/Authentication\";\nimport GeneralInfo from \"../GeneralInfo/GeneralInfo\";\n\n// Transistion States\nconst transitionStyles = {\n  entering: {\n    opacity: 0.5,\n  },\n  entered: {\n    opacity: 1,\n  },\n  exiting: {\n    opacity: 0.5,\n  },\n  exited: {\n    opacity: 0,\n  },\n};\n\n// Main Component\nconst SearchManga = () => {\n  // Hooks for the component\n  const authContext = useContext(Authentication);\n  const [searchResults, setSearchResults] = useState(Array);\n  const [compLoad, setCompLoad] = useState(false);\n\n  // JikanAPI reference.\n  // const jikanApi = axios.create({\n  //   baseURL: \"https://api.jikan.moe/v3/\",\n  // });\n\n  // This is sthe search function. This is how the view gets its results.\n  // async function getResults(newCall) {\n  //   // This is configured to ensure the correct anime at least pop up correctly with the mature content filter on.\n  //   // Otherwise titles like Black Clover and My Hero Academia won't ever show up.\n  //   const { data } = await jikanApi.get(\n  //     `search/anime?q=${newCall}&limit=15&genre=12&genre_exclude=0&order_by=members&sort=desc`\n  //   );\n  //   setSearchResults(data.results);\n  // }\n\n  // The logic needed to re render upon a new search and use the favorite attribute of the context that I might remove (inb4 I forget to remove this comment)\n  useEffect(() => {\n    const backEnd = axios.create({\n      baseURL: \"http://localhost:6060/api\",\n    });\n    async function getResults() {\n      const { data } = await backEnd.get(`/Manga`);\n\n      console.log(Array.isArray(data));\n      return data;\n    }\n    async function setResults() {\n      setSearchResults( await getResults());\n    }\n    setResults();\n    if (authContext.userList.uid === null && authContext.user !== null) {\n      authContext.getList(authContext.user.uid);\n    }\n  }, [authContext]);\n\n  useEffect(() => {\n    if (!compLoad && searchResults) {\n      setCompLoad(true);\n    }\n  }, [compLoad, searchResults]);\n\n  // Route Gauarding\n  if (!authContext.isAuthenticated) {\n    return <Redirect to=\"/\" />;\n  }\n\n  // conditional rendering to keep the view populated between searches.\n  if (!searchResults) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <Transition in={compLoad} timeout={1000} mountOnEnter unmountOnExit>\n        {(state) => (\n          <Card\n            id=\"search\"\n            style={\n              ({\n                transition: \"opacity 1s ease-out\",\n              },\n              transitionStyles[state])\n            }\n          >\n            {searchResults?.map((result) => {\n              return (\n                <>\n                  <LazyLoad offset={100}>\n                    <GeneralInfo anime={result} searchResult={true} />\n                  </LazyLoad>\n                </>\n              );\n            })}\n          </Card>\n        )}\n      </Transition>\n    );\n  }\n};\nexport default SearchManga;\n","import React from \"react\";\nimport { Card, Typography } from \"@material-ui/core\";\n\n// This component is mainly for reminding people that this app was crated for educational purposes.\nconst Footer = () => {\n  return (\n    <Card className=\"footer\">\n      <Typography variant=\"p\">\n        This site was made for educational purposes only.\n      </Typography>\n    </Card>\n  );\n};\nexport default Footer;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { Card } from \"@material-ui/core\";\nimport { Redirect } from \"react-router-dom\";\nimport Transition from \"react-transition-group/Transition\";\n\nimport GenreList from \"./GenreList/GenreList\";\nimport GeneralInfo from \"./GeneralInfo/GeneralInfo\";\nimport OtherInfo from \"./OtherInfo/OtherInfo\";\nimport { Authentication } from \"../Authentication/Authentication\";\n\n// Transistion States\nconst transitionStyles = {\n  entering: {\n    opacity: 0.5,\n  },\n  entered: {\n    opacity: 1,\n  },\n  exiting: {\n    opacity: 0.5,\n  },\n  exited: {\n    opacity: 0,\n  },\n};\n\nconst Anime = () => {\n  // Hooks needed in order for the view to function.\n  const [anime, setAnime] = useState();\n  const [compLoad, setCompLoad] = useState(false);\n  const authContext = useContext(Authentication);\n\n  // Logic for setting up the view for the view\n  useEffect(() => {\n    if (!compLoad && anime) {\n      setCompLoad(true);\n    }\n    const backEnd = axios.create({\n      baseURL: \"http://localhost:6060/api\",\n    });\n    async function getAnime(newCall) {\n      const { data } = await backEnd.get(`/Manga/Detail/${newCall}`);\n      setAnime(data);\n    }\n    getAnime(authContext.clicked);\n  }, [setAnime, authContext.clicked, compLoad, anime]);\n\n  // Route Gaurding\n  if (!authContext.isAuthenticated) {\n    return <Redirect to=\"/\" />;\n  }\n\n  // Ensuring the view is populated while the anime is being called on.\n  if (!anime) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Transition in={compLoad} timeout={1000} mountOnEnter unmountOnExit>\n      {(state) => (\n        <Card\n          id=\"container\"\n          style={\n            ({\n              transition: \"opacity 1s ease-out\",\n            },\n            transitionStyles[state])\n          }\n        >\n          <GeneralInfo anime={anime} searchResult={false} styles={null} />\n          {/* These components are mainly static and don't have any special function\n          They only take the props given and map them out. In some cases only if they have something to map out.\n    */}\n          <GenreList genres={anime?.genres} />\n          <OtherInfo\n            title_synonyms={anime?.title_synonyms}\n            genres={anime?.genres}\n            related={anime?.related}\n          />\n        </Card>\n      )}\n    </Transition>\n  );\n};\n\nexport default Anime;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport Anime from \"./Anime/Anime\";\nimport Login from \"./Login/Login\";\nimport Signup from \"./Login/SignUp/SignUp\";\nimport NavBar from \"./Anime/Navigation\";\nimport Search from \"./Anime/Search/Search\";\nimport FavoriteList from \"./Anime/FavoriteList/FavoriteList\";\nimport SearchManga from \"./Anime/Search/SearchManga\";\nimport Footer from \"./Anime/Footer\";\nimport Manga from \"./Anime/Manga\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <NavBar />\n        <Route path=\"/\" exact component={Login} />\n        <Route path=\"/signup\" exact component={Signup} />\n        <Route path=\"/Anime\" exact component={Anime} />\n        <Route path=\"/Search\" exact component={Search} />\n        <Route path=\"/Favorites\" exact component={FavoriteList} />\n        <Route path=\"/SearchManga\" exact component={SearchManga} />\n        <Route path=\"/Manga\" exact component={Manga} />\n        <Footer />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport AuthProvider from \"./Authentication/Authentication\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}